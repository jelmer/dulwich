name: Build Python distributions

on:
  push:
  schedule:
    - cron: "0 6 * * *" # Daily 6AM UTC build

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: true

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Install native dependencies (Ubuntu)
        run: sudo apt-get update && sudo apt-get install -y libgpgme-dev libgpg-error-dev
        if: "matrix.os == 'ubuntu-latest'"
      - name: Install native dependencies (MacOS)
        run: brew install swig gpgme
        if: "matrix.os == 'macos-latest'"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel fastimport paramiko urllib3 cibuildwheel setuptools-rust
      - name: Install gpg on supported platforms
        run: pip install -U gpg
        if: "matrix.os != 'windows-latest'"
      - name: Run test suite
        run: python -m unittest dulwich.tests.test_suite
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: "matrix.os == 'ubuntu-latest'"
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build sdist
        run: python -m build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          path: ./dist/*.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs:
      - build-wheels
      - build-sdist
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/dulwich-')
    steps:
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Download distributions
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - name: Publish distributions
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
