environment:

  matrix:

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3.x"
      PYTHON_ARCH: "64"
      DISTUTILS_USE_SDK: "1"

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"
      DISTUTILS_USE_SDK: "1"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "build.cmd %PYTHON%\\python.exe --version"
  - "build.cmd %PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install setuptools/wheel so that we can e.g. use bdist_wheel
  - "pip install setuptools wheel"

  - "build.cmd %PYTHON%\\python.exe setup.py develop"

build_script:
  # Build the compiled extension
  - "build.cmd %PYTHON%\\python.exe setup.py build"

test_script:
  - "build.cmd %PYTHON%\\python.exe setup.py test"

after_test:
  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"
  # http://stackoverflow.com/questions/43255455/unicode-character-causing-error-with-bdist-wininst-on-python-3-but-not-python-2
  # - "python setup.py bdist_wininst"
  - "build.cmd %PYTHON%\\python.exe setup.py bdist_msi"
  - ps: "ls dist"

artifacts:
  - path: dist\*
