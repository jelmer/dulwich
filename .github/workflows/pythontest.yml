name: Python tests

on:
  push:
    branches: [ main, master ]
  pull_request:
  schedule:
    - cron: "0 6 * * *" # Daily 6AM UTC build

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version:
          ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip
      - name: Install native dependencies (Ubuntu)
        run: sudo apt-get update && sudo apt-get install -y libgpgme-dev libgpg-error-dev
        if: "matrix.os == 'ubuntu-latest'"
      - name: Provide gpgme-config and gpg-error-config
        if: "matrix.os == 'ubuntu-latest'"
        run: |
          mkdir -p "$HOME/.local/bin"
          cp .github/gpgme-config "$HOME/.local/bin/gpgme-config"
          cp .github/gpg-error-config "$HOME/.local/bin/gpg-error-config"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install native dependencies (MacOS)
        run: brew install swig gpgme
        if: "matrix.os == 'macos-latest'"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ".[fastimport,paramiko,https]"  setuptools-rust
      - name: Install gpg on supported platforms
        run: pip install --upgrade ".[pgp]"
        if: "matrix.os != 'windows-latest' && matrix.python-version != 'pypy3'"
      - name: Style checks
        run: |
          pip install ".[dev]"
          python -m ruff check .
          python -m ruff format --check .
      - name: Typing checks
        run: |
          pip install --upgrade types-paramiko types-requests
          python -m mypy dulwich
        if: "matrix.python-version != 'pypy3'"
      - name: Build
        run: |
          python setup.py build_ext -i
        env:
          RUSTFLAGS: "-D warnings"
      - name: codespell
        run: |
          pip install --upgrade codespell
          codespell --config .codespellrc .
      - name: Coverage test suite run
        run: |
          pip install --upgrade coverage
          python -m coverage run -p -m unittest tests.test_suite
